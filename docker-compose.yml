services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: sop-postgres
    environment:
      POSTGRES_DB: security_ops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Python SOP Processing Service
  python-sop:
    build: ./python-sop-service
    container_name: sop-python
    environment:
      POSTGRES_URL: postgresql://postgres:password@postgres:5432/security_ops
      PORT: 8001
    ports:
      - "8001:8001"
    volumes:
      - ./python-sop-service:/app
      - ./examples:/app/examples
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Routing Engine
  go-routing:
    build: ./go-routing-engine
    container_name: sop-go
    environment:
      POSTGRES_URL: postgresql://postgres:password@postgres:5432/security_ops
      PYTHON_SERVICE_URL: http://python-sop:8001
      PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - ./go-routing-engine:/app
      - ./examples:/app/examples
    depends_on:
      postgres:
        condition: service_healthy
      python-sop:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Svelte Frontend
  svelte-frontend:
    build: ./svelte-frontend
    container_name: sop-svelte
    environment:
      API_URL: http://localhost:8080
      PYTHON_API_URL: http://localhost:8001
    ports:
      - "3005:3005"
    volumes:
      - ./svelte-frontend:/app
      - /app/node_modules
    depends_on:
      - go-routing
      - python-sop

volumes:
  postgres_data: